{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport fetch from \"cross-fetch\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isHttpUrl, parseConnectionError } from \"@walletconnect/jsonrpc-utils\";\nconst DEFAULT_HTTP_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\nconst DEFAULT_HTTP_METHOD = \"POST\";\nconst DEFAULT_FETCH_OPTS = {\n  headers: DEFAULT_HTTP_HEADERS,\n  method: DEFAULT_HTTP_METHOD\n};\nexport class HttpConnection {\n  constructor(url) {\n    this.url = url;\n    this.events = new EventEmitter();\n    this.isAvailable = false;\n    this.registering = false;\n\n    if (!isHttpUrl(url)) {\n      throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);\n    }\n\n    this.url = url;\n  }\n\n  get connected() {\n    return this.isAvailable;\n  }\n\n  get connecting() {\n    return this.registering;\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async open() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.url;\n    await this.register(url);\n  }\n\n  async close() {\n    if (!this.isAvailable) {\n      throw new Error(\"Connection already closed\");\n    }\n\n    this.onClose();\n  }\n\n  async send(payload, context) {\n    if (!this.isAvailable) {\n      await this.register();\n    }\n\n    try {\n      const body = safeJsonStringify(payload);\n      const res = await fetch(this.url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n        body\n      }));\n      const data = await res.json();\n      this.onPayload({\n        data\n      });\n    } catch (e) {\n      this.onError(payload.id, e);\n    }\n  }\n\n  async register() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.url;\n\n    if (!isHttpUrl(url)) {\n      throw new Error(`Provided URL is not compatible with HTTP connection: ${url}`);\n    }\n\n    if (this.registering) {\n      return new Promise((resolve, reject) => {\n        this.events.once(\"register_error\", error => {\n          reject(error);\n        });\n        this.events.once(\"open\", () => {\n          if (typeof this.isAvailable === \"undefined\") {\n            return reject(new Error(\"HTTP connection is missing or invalid\"));\n          }\n\n          resolve();\n        });\n      });\n    }\n\n    this.url = url;\n    this.registering = true;\n\n    try {\n      const body = safeJsonStringify({\n        id: 1,\n        jsonrpc: \"2.0\",\n        method: \"test\",\n        params: []\n      });\n      await fetch(url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n        body\n      }));\n      this.onOpen();\n    } catch (e) {\n      const error = this.parseError(e);\n      this.events.emit(\"register_error\", error);\n      this.onClose();\n      throw error;\n    }\n  }\n\n  onOpen() {\n    this.isAvailable = true;\n    this.registering = false;\n    this.events.emit(\"open\");\n  }\n\n  onClose() {\n    this.isAvailable = false;\n    this.registering = false;\n    this.events.emit(\"close\");\n  }\n\n  onPayload(e) {\n    if (typeof e.data === \"undefined\") return;\n    const payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n    this.events.emit(\"payload\", payload);\n  }\n\n  onError(id, e) {\n    const error = this.parseError(e);\n    const message = error.message || error.toString();\n    const payload = formatJsonRpcError(id, message);\n    this.events.emit(\"payload\", payload);\n  }\n\n  parseError(e) {\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.url;\n    return parseConnectionError(e, url, \"HTTP\");\n  }\n\n}\nexport default HttpConnection;","map":{"version":3,"mappings":"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","names":["EventEmitter","fetch","safeJsonParse","safeJsonStringify","formatJsonRpcError","isHttpUrl","parseConnectionError","DEFAULT_HTTP_HEADERS","Accept","DEFAULT_HTTP_METHOD","DEFAULT_FETCH_OPTS","headers","method","HttpConnection","constructor","url","Error","connected","isAvailable","connecting","registering","on","event","listener","events","once","off","removeListener","open","register","close","onClose","send","payload","context","body","res","Object","data","json","onPayload","e","onError","id","Promise","resolve","reject","error","jsonrpc","params","onOpen","parseError","emit","message","toString"],"sources":["../../src/http.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}