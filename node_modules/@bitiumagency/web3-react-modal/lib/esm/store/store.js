var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { InjectedConnector } from "@web3-react/injected-connector";
import create from "zustand";
var useStore = create(function (set, get) { return ({
    isInitialized: false,
    modalIsOpen: false,
    useWeb3React: null,
    supportedChains: [],
    connectors: [],
    addConnectors: function (connectors) {
        var tmpConnectors = [];
        connectors.forEach(function (item) {
            var connector = new item.connector(item.options);
            tmpConnectors.push({
                title: item.title,
                logo: item.logo,
                id: item.id,
                connector: connector
            });
        });
        set(function () { return ({ connectors: __spreadArray([], tmpConnectors, true) }); });
    },
    setSupportedChains: function (supportedChains) {
        set(function () { return ({ supportedChains: supportedChains }); });
    },
    setUseWeb3React: function (useWeb3React) { return set(function () { return ({ useWeb3React: useWeb3React }); }); },
    setModalIsOpen: function (modalIsOpen) { return set(function () { return ({ modalIsOpen: modalIsOpen }); }); },
    setIsInitialized: function (isInitialized) { return set(function () { return ({ isInitialized: isInitialized }); }); },
    injectAccountListener: function () {
        window === null || window === void 0 ? void 0 : window.ethereum.on("accountsChanged", function (accounts) {
            if (accounts.length > 0) {
                localStorage.setItem("walletIsConnected", "true");
            }
            else {
                localStorage.setItem("walletIsConnected", "false");
            }
        });
    },
    connect: function () {
        set(function () { return ({ modalIsOpen: true }); });
    },
    activateInjected: function (activate, userChaneId) { return __awaiter(void 0, void 0, void 0, function () {
        var injected;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!((window === null || window === void 0 ? void 0 : window.ethereum) &&
                        !get().supportedChains.find(function (c) { return +c.chainId === +userChaneId; }))) return [3 /*break*/, 2];
                    return [4 /*yield*/, get().switchNetwork(get().supportedChains[0])];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    injected = new InjectedConnector({
                        supportedChainIds: get().supportedChains.map(function (c) { return c.chainId; })
                    });
                    activate(injected);
                    get().injectAccountListener();
                    return [2 /*return*/];
            }
        });
    }); },
    switchNetwork: function (chain) { return __awaiter(void 0, void 0, void 0, function () {
        var provider, toHex, err_1;
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    provider = window.ethereum;
                    toHex = function (d) {
                        var res = "0x" + Number(d).toString(16).toUpperCase();
                        console.log(res);
                        return res;
                    };
                    if (!((provider === null || provider === void 0 ? void 0 : provider.networkVersion) !== chain.chainId)) return [3 /*break*/, 6];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 3, , 6]);
                    return [4 /*yield*/, provider.request({
                            method: "wallet_switchEthereumChain",
                            params: [{ chainId: toHex(chain.chainId) }]
                        })];
                case 2:
                    _d.sent();
                    return [3 /*break*/, 6];
                case 3:
                    err_1 = _d.sent();
                    if (!(err_1.code === 4902)) return [3 /*break*/, 5];
                    return [4 /*yield*/, provider.request({
                            method: "wallet_addEthereumChain",
                            params: [
                                {
                                    chainName: chain.name,
                                    chainId: toHex(chain.chainId),
                                    nativeCurrency: {
                                        name: (_a = chain === null || chain === void 0 ? void 0 : chain.nativeCurrency) === null || _a === void 0 ? void 0 : _a.name,
                                        decimals: (_b = chain === null || chain === void 0 ? void 0 : chain.nativeCurrency) === null || _b === void 0 ? void 0 : _b.decimals,
                                        symbol: (_c = chain === null || chain === void 0 ? void 0 : chain.nativeCurrency) === null || _c === void 0 ? void 0 : _c.symbol
                                    },
                                    rpcUrls: [chain.rpcUrl]
                                }
                            ]
                        })];
                case 4:
                    _d.sent();
                    _d.label = 5;
                case 5: return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    }); }
}); });
export default useStore;
